import os
import json
import time
import random
import sys
import threading
from flask import Flask, request, jsonify
from flask_cors import CORS
from instagrapi import Client
from instagrapi.exceptions import (
    LoginRequired, 
    RateLimitError, 
    ChallengeRequired, 
    TwoFactorRequired,

    FeedbackRequired
)
from dotenv import load_dotenv

# For√ßa o flush do stdout para os logs aparecerem no Gunicorn
sys.stdout = sys.stderr

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

print("="*60, flush=True)
print("üöÄ INICIANDO SERVIDOR INSTADM", flush=True)
print("="*60, flush=True)

# Debug: Verificar se vari√°veis de ambiente est√£o dispon√≠veis
session_id_check = os.getenv('SESSION_ID')
proxy_check = os.getenv('PROXY')
flask_env_check = os.getenv('FLASK_ENV')

print(f"üîç Verificando vari√°veis de ambiente:", flush=True)
print(f"   SESSION_ID: {'‚úÖ Configurado' if session_id_check else '‚ùå N√ÉO ENCONTRADO'}", flush=True)
if session_id_check:
    print(f"   SESSION_ID (primeiros 20 chars): {session_id_check[:20]}...", flush=True)
print(f"   PROXY: {'‚úÖ Configurado' if proxy_check else '‚ùå N√ÉO ENCONTRADO'}", flush=True)
if proxy_check:
    print(f"   PROXY: {proxy_check}", flush=True)
print(f"   FLASK_ENV: {flask_env_check or 'n√£o configurado'}", flush=True)
print("="*60, flush=True)

app = Flask(__name__)
CORS(app) # Adiciona suporte a CORS para todas as rotas e origens

# --- Configura√ß√£o do Cliente InstaAPI ---

# Inicializa o cliente globalmente (ser√° configurado na primeira requisi√ß√£o)
cl = None
# Lock para evitar que m√∫ltiplos workers tentem fazer login ao mesmo tempo
login_lock = threading.Lock()

def get_instagrapi_client():
    """
    Retorna o cliente InstaAPI, usando persist√™ncia de sess√£o.
    IMPORTANTE: N√ÉO faz login a cada requisi√ß√£o, apenas carrega a sess√£o salva.
    """
    global cl
    
    session_file = "/tmp/instagram_session.json"
    
    # Se o cliente j√° estiver autenticado, retorna
    if cl:
        try:
            # Verifica se ainda est√° autenticado fazendo uma requisi√ß√£o r√°pida
            cl.account_info()
            return cl
        except:
            # Se falhar, tenta recarregar a sess√£o
            print("‚ö†Ô∏è Sess√£o expirada, recarregando...", flush=True)
            cl = None

    # Usa lock para evitar que m√∫ltiplos workers tentem fazer login ao mesmo tempo
    with login_lock:
        # Verifica novamente se outro worker j√° autenticou enquanto esper√°vamos o lock
        if cl:
            try:
                cl.account_info()
                return cl
            except:
                cl = None
        
        # Configura o cliente
        cl = Client()
        
        print("=" * 50, flush=True)
        print("Carregando sess√£o do Instagram...", flush=True)
        
        # Configura√ß√µes de Anti-Bloqueio
        proxy = os.getenv("PROXY")
        if proxy:
            print(f"Configurando proxy: {proxy}", flush=True)
            try:
                cl.set_proxy(proxy)
                print(f"Proxy configurado com sucesso!", flush=True)
            except Exception as e:
                print(f"ERRO ao configurar proxy: {e}", flush=True)
        else:
            print("Nenhum proxy configurado.", flush=True)

        # Tenta carregar a sess√£o salva
        if os.path.exists(session_file):
            try:
                print(f"Carregando sess√£o de {session_file}...", flush=True)
                cl.load_settings(session_file)
                print("‚úÖ Sess√£o carregada com sucesso!", flush=True)
                
                # Verifica se a sess√£o ainda √© v√°lida
                try:
                    account_info = cl.account_info()
                    print(f"‚úÖ Sess√£o v√°lida! Usu√°rio: {account_info.username} (ID: {account_info.pk})", flush=True)
                    print("=" * 50, flush=True)
                    return cl
                except LoginRequired:
                    print("‚ö†Ô∏è Sess√£o expirada, fazendo novo login...", flush=True)
                    cl = Client()  # Recria o cliente
                    if proxy:
                        cl.set_proxy(proxy)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar sess√£o: {e}", flush=True)
                cl = Client()  # Recria o cliente
                if proxy:
                    cl.set_proxy(proxy)
        
        # Se n√£o conseguiu carregar a sess√£o, faz login com SESSION_ID
        session_id = os.getenv("SESSION_ID")
        if not session_id:
            print("ERRO: SESSION_ID n√£o configurado!", flush=True)
            raise ValueError("SESSION_ID n√£o configurado no arquivo .env. Por favor, configure.")
        
        print(f"SESSION_ID encontrado: {session_id[:20]}...", flush=True)

        try:
            # Autentica usando login_by_sessionid (m√©todo correto do instagrapi)
            print("Autenticando com SESSION_ID...", flush=True)
            cl.login_by_sessionid(session_id)
            print("‚úÖ Autentica√ß√£o bem-sucedida!", flush=True)
            
            # Verifica se o sessionid √© v√°lido
            account_info = cl.account_info()
            print(f"‚úÖ Usu√°rio autenticado: {account_info.username} (ID: {account_info.pk})", flush=True)
            
            # Salva a sess√£o para uso futuro
            print(f"Salvando sess√£o em {session_file}...", flush=True)
            cl.dump_settings(session_file)
            print("‚úÖ Sess√£o salva com sucesso!", flush=True)
            
            print("Cliente InstaAPI autenticado com sucesso via SESSION_ID. Sess√£o salva.", flush=True)
            print("=" * 50, flush=True)
            return cl

        except (LoginRequired, ChallengeRequired, TwoFactorRequired, Exception) as e:
            print(f"\u274c ERRO DE AUTENTICA√á√ÉO: {type(e).__name__}: {e}", flush=True)
            print("=" * 50, flush=True)
            cl = None # Limpa o cliente para for√ßar nova tentativa
            raise ConnectionError(f"Falha na autentica√ß√£o do InstaAPI: {e}")

# --- Endpoint de Envio de DM ---

@app.route('/send_dm', methods=['POST'])
def send_dm():
    """
    Endpoint para receber a requisi√ß√£o de envio de DM da extens√£o.
    """
    data = request.json
    if not data:
        return jsonify({"success": False, "error": "Requisi√ß√£o JSON inv√°lida."}), 400

    username = data.get('username')
    message = data.get('message')
    delay_min = data.get('delay_min', 5)  # Padr√£o: 5 segundos
    delay_max = data.get('delay_max', 15)  # Padr√£o: 15 segundos

    if not username or not message:
        return jsonify({"success": False, "error": "Campos 'username' e 'message' s√£o obrigat√≥rios."}), 400

    try:
        # 1. Obt√©m o cliente autenticado
        client = get_instagrapi_client()
        
        # 2. Obt√©m o ID do usu√°rio (InstaAPI trabalha com User IDs, n√£o usernames)
        # Este passo √© crucial e deve ser feito com cuidado para evitar banimento por spam de busca.
        try:
            user_id = client.user_id_from_username(username)
        except Exception as e:
            print(f"Erro ao buscar User ID para {username}: {e}")
            # Se o usu√°rio n√£o for encontrado, retorna um erro espec√≠fico
            return jsonify({"success": False, "error": f"Usu√°rio @{username} n√£o encontrado ou erro na busca."}), 404

        # 3. Envio da Mensagem
        # O InstaAPI envia a DM para o User ID
        client.direct_send(text=message, user_ids=[user_id])
        
        # 4. Retorna sucesso com delay recomendado
        # O delay ser√° aplicado pela EXTENS√ÉO, n√£o pelo servidor
        # Isso evita timeout do Gunicorn
        delay = random.randint(delay_min, delay_max)
        print(f"‚úÖ DM enviada para @{username}. Delay recomendado: {delay}s", flush=True)

        return jsonify({"success": True, "username": username, "message": message, "delay": delay}), 200

    except RateLimitError as e:
        # Erro de Rate Limit: Parar o processo e avisar o usu√°rio
        print(f"ERRO CR√çTICO (Rate Limit): {e}")
        return jsonify({"success": False, "error": "Limite de taxa atingido. Por favor, espere algumas horas antes de tentar novamente.", "details": str(e)}), 429
    
    except (LoginRequired, ChallengeRequired, TwoFactorRequired) as e:
        # Erro de Autentica√ß√£o/Seguran√ßa: O session_id expirou ou o Instagram pediu verifica√ß√£o
        print(f"ERRO CR√çTICO (Autentica√ß√£o): {e}")
        # Limpa o cliente para for√ßar nova autentica√ß√£o na pr√≥xima requisi√ß√£o
        global cl
        cl = None 
        return jsonify({"success": False, "error": "Sess√£o expirada ou verifica√ß√£o de seguran√ßa necess√°ria. Atualize o SESSION_ID no .env.", "details": str(e)}), 401
    
    except FeedbackRequired as e:
        # Erro de Feedback (geralmente acontece ap√≥s enviar muitas mensagens iguais)
        print(f"ERRO CR√çTICO (Feedback): {e}")
        return jsonify({"success": False, "error": "Feedback de spam recebido. O Instagram bloqueou temporariamente o envio de mensagens.", "details": str(e)}), 403
        
    except ConnectionError as e:
        # Erro de Conex√£o (geralmente falha na autentica√ß√£o inicial)
        return jsonify({"success": False, "error": str(e)}), 500

    except Exception as e:
        # Qualquer outro erro n√£o previsto
        print(f"Erro inesperado: {e}")
        return jsonify({"success": False, "error": f"Erro interno do servidor: {type(e).__name__}", "details": str(e)}), 500

# Endpoint de Teste
@app.route('/test', methods=['GET'])
def test_route():
    try:
        # Tenta obter/autenticar o cliente
        client = get_instagrapi_client()
        
        # Verifica se est√° autenticado fazendo uma requisi√ß√£o real
        try:
            account_info = client.account_info()
            return jsonify({
                "status": "Servidor InstaDM Online",
                "client_status": "Authenticated",
                "username": account_info.username,
                "user_id": str(account_info.pk)
            }), 200
        except Exception as e:
            return jsonify({
                "status": "Servidor InstaDM Online",
                "client_status": "Authentication Failed",
                "error": str(e)
            }), 200
    except Exception as e:
        return jsonify({
            "status": "Servidor InstaDM Online",
            "client_status": "Not Initialized",
            "error": str(e)
        }), 200

# Tenta inicializar o cliente automaticamente quando o m√≥dulo √© carregado
print("\n" + "="*60, flush=True)
print("üîë Tentando autenticar automaticamente...", flush=True)
print("="*60, flush=True)
try:
    get_instagrapi_client()
    print("‚úÖ Autentica√ß√£o autom√°tica bem-sucedida!", flush=True)
except Exception as e:
    print(f"‚ö†Ô∏è Aviso: Autentica√ß√£o autom√°tica falhou. O servidor tentar√° novamente na primeira requisi√ß√£o.", flush=True)
    print(f"   Erro: {type(e).__name__}: {e}", flush=True)
print("="*60 + "\n", flush=True)

if __name__ == '__main__':
    # O servidor deve rodar em 0.0.0.0 para ser acess√≠vel pelo expose
    app.run(host='0.0.0.0', port=5001, debug=False)

